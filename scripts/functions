#!/usr/bin/env bash

SRC_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd || exit 1)
BASE_DIR=$(cd "$SRC_DIR" && cd ..; pwd || exit 1)

function usage {
    local message
    if [ "$#" -gt 0 ]; then
        message="$1"
    fi

    cat <<EOF
usage: $0 <version>

$message
EOF
    [ "$#" -eq 0 ] && exit 0 || exit 1
}

function get_download_dir {
    local result
    if [ "$#" -gt 0 ]; then
        result="$BASE_DIR/out/download/$1/"
    else
        result="$BASE_DIR/out/download/"
    fi
    echo "$result"
}

function get_release_dir {
    [ "$#" -gt 0 ] || (echo "parameter version missing"; exit 1)
    local result="$BASE_DIR/out/release/$1"
    echo "$result"
}

# $1: version to download
function download_virtctl_binaries {
    local version
    version="$1"

    local download_dir
    download_dir="$(get_download_dir)"

    if [ ! -f "$download_dir/fetch_${version}_ok" ]; then

        local download_target_dir
        download_target_dir=$(get_download_dir "$version")
        mkdir -p "$download_target_dir"

        local base_url="https://github.com/kubevirt/kubevirt"
        for download_path in $(curl --fail "$base_url/releases/tag/$version" | \
            grep -oE "/releases\/.*\/virtctl-$version-(linux|windows|darwin)-amd64(\.exe)?");
        do
            (
                cd "$download_target_dir" || (echo "directory $download_target_dir does not exist!"; exit 1)
                wget "$base_url$download_path"
            )
        done

        # leave mark that we have finished successfully
        touch "$BASE_DIR/out/fetch_${version}_ok"
    fi

    echo "$(get_virtctl_binaries $version)"
}

function create_release_packages {
    local version
    version="$1"

    local release_dir="$BASE_DIR/out/release/$version"

    for binary_file in $(get_virtctl_binaries "$1");
    do
        chmod +x "$binary_file"
        [ -f "$binary_file" ] || (echo "binary file $binary_file does not exist!"; exit 1)
        release_file_name="${binary_file/*\//}.tar.gz"
        if [ ! -f "$release_dir/$release_file_name" ]; then
            archive_dir="$release_dir/virtctl/"
            mkdir -p "$archive_dir"
            cp "$binary_file" "$archive_dir"
            (
                cd "$release_dir" || (echo "directory $release_dir does not exist!"; exit 1)
                tar zcvf "$release_file_name" virtctl/
                rm -rf "virtctl/"
            )
        fi
    done

    echo "$(get_release_packages "$version")"
}

function get_virtctl_binaries {
    local version
    version="$1"

    echo "$(find "$(get_download_dir $version)" -name 'virtctl*')"
}

function get_release_packages {
    local version
    version="$1"

    echo "$(find "$(get_release_dir "$version")" -name 'virtctl*.tar.gz')"
}

function create_krew_manifest_yaml {
    local version
    version="$1"

    output_file="$(get_release_dir "$1")/virt.yaml"

    if [ ! -f "$output_file" ]; then

        export VIRT_VERSION="$version"
        (cat "$BASE_DIR/manifest-templates/virt-head.yaml.template" | envsubst) > "$output_file"

        for release_file in $(get_release_packages "$version");
        do
            echo "" >> "$output_file"
            release_file_sah256sum=$(sha256sum "$release_file" | cut -d ' ' -f 1)
            release_file_name="${release_file##*/}"
            release_file_binary_name="${release_file_name%.tar.gz}"
            regexp='virtctl-(v[0-9\.]+)-([a-z]+)-([a-z0-9]+)(\.exe)?\.tar\.gz'

            VIRT_OS=$(echo "$release_file_name" | sed -E 's/'"$regexp"'/\2/g')
            export VIRT_OS
            VIRT_ARCH=$(echo "$release_file_name" | sed -E 's/'"$regexp"'/\3/g')
            export VIRT_ARCH
            export VIRT_BUNDLE_URI="https://github.com/dhiller/kubectl-virt-plugin/releases/download/$version/$release_file_name"
            export VIRT_BUNDLE_SHA256="$release_file_sah256sum"
            export VIRT_BUNDLE_BINARY="$release_file_binary_name"
            VIRT_BUNDLE_BINARY_TARGET="$(echo "$release_file_binary_name" | \
                        sed -E 's/virtctl-(v[0-9\.]+)-([a-z]+)-([a-z0-9]+)(\.exe)?/virtctl\4/g')"
            export VIRT_BUNDLE_BINARY_TARGET
            (cat "$BASE_DIR/manifest-templates/virt-platform.yaml.template" | envsubst) >> "$output_file"
        done

        echo "" >> "$output_file"
        (cat "$BASE_DIR/manifest-templates/virt-footer.yaml.template" | envsubst) >> "$output_file"

    fi

    echo "Manifest for dist is $output_file"
}